@inject HttpClient _client

<EditForm Model="@recommendation" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">

        <div class="form-group">
            <label>Game Name: </label>
            <div>
                <InputSelect @bind-Value="@recommendation.GameId" class="form-control">
                    <option value> Select Game </option>
                    @if (Games != null)
                    {
                        foreach (var game in Games)
                        {
                            <option value="@game.Id">@game.Title</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => recommendation.GameId)" />
            </div>
        </div>

        <br />

        <div class="form-group">
            <label>Rank: </label>
            <div>
                <InputNumber @bind-Value="@recommendation.Rank" class="form-control" />
                <ValidationMessage For="@(() => recommendation.Rank)" />
            </div>
        </div>

        <br />

    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }

    <br />
    <br />
    <BackToList Target="recommendations" />

</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Recommendation? recommendation { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Game>? Games;

    protected async override Task OnInitializedAsync()
    {
        Games = await _client.GetFromJsonAsync<List<Game>>($"{Endpoints.GamesEndpoint}");
    }
}


