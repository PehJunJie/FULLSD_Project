@page "/orders/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Game Orders</h3>
<br />

@if (Orders == null)
{
    <div class="alert alert-info">Loading Orders...</div>
}
else
{
    <table class="table table-responsive" id="bookingsTable">
        <thead>
            <tr>
                <th>Name</th>
                <th>Order Date</th>
                <th>Ordered Game(s)</th>
                <th>Amount Paid</th>
                <th>Payment Method</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in Orders)
            {
                <tr>
                    <td>@order.Consumer.Name</td>
                    <td>@order.OrderDate.ToString("dd/MM/yyyy")</td>
                    <td>@order.OrderedGames</td>
                    <td>@order.AmountPaid.ToString("$0.00")</td>
                    <td>@order.Payment.Method</td>
                    <td>
                        <a href="/orders/view/@order.Id" class="btn btn-primary">
                            <span class="oi oi-eye"></span>
                        </a>
                        <a href="/orders/edit/@order.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(order.Id))">
                            <span class="oi oi-trash"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Order>? Orders;

    protected async override Task OnInitializedAsync()
    {
        // _interceptor.MonitorEvent();
        Orders = await _client.GetFromJsonAsync<List<Order>>($"{Endpoints.OrdersEndpoint}");
    }

    async Task Delete(int orderId)
    {
        if (Orders != null)
        {
            var order = Orders.First(q => q.Id == orderId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {order.Consumer.Name} orders?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.OrdersEndpoint}/{orderId}");
                await OnInitializedAsync();
            }
        }
    }

    // protected async override Task OnAfterRenderAsync(bool firstRender)
    // {
    //     await js.InvokeVoidAsync("AddDataTable", "#bookingsTable");
    // }

    // // public void Dispose()
    // // {
    // //     _interceptor.DisposeEvent();
    // //     js.InvokeVoidAsync("DataTablesDispose", "#bookingsTable");
    // // }
}
